// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction


    PARTS:
    // Put your code here:





    //とりあえず@1が来た時を考える
    //C命令->D=A
    // A(0) or C(1)
    DMux(in=true, sel=instruction[15], a=Aorder, b=Corder);
    // C命令 (ALUへの命令)comp領域=6～12 : (レジスタの指定)dest領域=3～5 : (移動先の指定)jmp領域0～2
    // A命令＝Aレジスタに15bitの値を格納する。定数の格納はこれでしかできない

   // ARegisterへの格納 
    ARegister(in=instruction[0..14], load=Aorder, out=Areg); // if Aorder==1 ARegister=instruction
    //comp領域11bitでAレジスタか、メモリ入力のどちらを操作するかが決定される。1=メモリ:0=Aレジスタ
    Mux16(a=Areg, b=inM, sel=instruction[12], out=inALU);
    //  D=A (comp:0110000)
    ALU(x=Dreg, y=Areg, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=reslut, zr=zero, ng=nega);
    // (dest:010)=in Dregister
    // DMux8Way(in=true, sel=instruction[3..5], a=nul, b=intoM, c=inD, d=inMD, e=inA, f=inAM, g=inAD, h=inAMD);
    //d1 = instruction[5]
    Mux(a=false, b=true, sel=instruction[5], out=inA);
    Mux(a=false, b=true, sel=instruction[4], out=inD);
    Mux(a=false, b=true, sel=instruction[3], out=inM);
    //all 0=null
    Or(a=inA, b=inD, out=a1);
    Or(a=a1, b=inM, out=nul);
    DRegister(in=result, load=inD, out=Dreg);

}